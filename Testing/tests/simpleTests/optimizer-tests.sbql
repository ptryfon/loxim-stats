-- roznica gdy obiekt zawiera w sobie referencje do obiektu a kopie innego obiektu
--    zmieniam obiekt dep, zmiane widac w obiektach zawierajacych do niego ref,
--    nie widac w tym ktory zawieral deref(dep)


begin;
/

delete dep;
/

delete emp;
/

create (1 as no, "dep1" as name) as dep;
/

create (2 as no, "dep2" as name) as dep;
/

create ("Kuba1" as name, 10 as sal, (dep where no = 1) as dep) as emp;
/

create ("Kuba2" as name, 20 as sal, (ref(dep where no = 1)) as dep) as emp;
/

create ("Kuba3" as name, 30 as sal, (deref(dep where no = 1)) as dep) as emp;
/

end;
/

begin;
/

deref(deref(emp.dep));
/

(dep where no = 1).name := "zmienionyDep1";
/

deref(deref(emp.dep));
/

end;
/

-- tworze duzo obiektow - to trwa dlugo ale sie udaje zapytanie obiekt;
-- wywala najpierw klienta(czytanie poza buforem) potem serwer(segfault)

begin;
/

create 0 as x;
/

while (x<10) do (create deref(x) as obiekt).(x:=x+1) od;
/

obiekt;
/

delete x;
/

end;
/

-- testy dla optymalizatora w parserze

begin;
/

delete obiekt;
/

create 0 as x;
/

--  tworze obiekty majace w sobie obiekty ... - gleboko zagniezdzone - 
-- daje dlugie wyrazenia sciezkowe

while (x<10) do (create (deref(x) as id, ((deref(x) * 10) as id, (deref(x) * 100 as placa, deref(x) * 30 as netto, deref(x) * 70 as podatek) as zarobek, "Sitek" as surname) as dane , "Jakub" as name)as obiekt).(x:=x+1) od;
/

delete x;
/

-- wyciaganie niezaleznych podzapytan }

obiekt.(deref(name) join deref(sum(obiekt.dane.zarobek.placa)));
/

obiekt.(deref(sum(obiekt.dane.zarobek.placa)) as _placa).(deref(name) join _placa);
/

(deref(sum(obiekt.dane.zarobek.placa)) as _placa).obiekt.(deref(name) join _placa);
/

-- wyciaganie wspolnych wyrazen sciezkowych

deref(obiekt.dane.zarobek.placa join obiekt.dane.zarobek.netto);
/

deref(obiekt.(dane.zarobek.placa join dane.zarobek.netto));
/

deref(obiekt.dane.zarobek.(placa join netto));
/

-- usuwanie martwych podzapytan

deref(obiekt.((sum(obiekt.dane.zarobek.placa) as suma) join (name as imie) ).imie);
/

deref(obiekt.((name as imie) ).imie);
/

deref(obiekt.name);
/

end;
/
quit
/
