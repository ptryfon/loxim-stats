begin
/

create or update class Person {
	instance person : {name}
}
/

create or update class Student extends Person {
	instance student : {scholarship}
	
	procedure getIncome() {
		return scholarship
	}

--	simple inheritance check method
--	procedure writeSTH() {
--		return "Alicia has a cat"
--	}


	procedure constructor() {
		self :< 0 as scholarship;
		return self
	}


	procedure constructor(currSchol) {
		self :< currSchol as scholarship
	}	

    procedure destructor() {
        delete self.scholarship;
        return Student excludes self
    }

}
/

create or update class UniversityEmployee extends Person {
	instance : {universityName} 
}
/

create or update class Teacher extends UniversityEmployee {
	instance teacher : {salary}

	procedure getIncome() {
		return salary
	}
	
	procedure constructor(currSal) {
		self :< currSal as salary;
		return self
	}

	procedure constructor() {
		self :< 0 as salary;
		return self
	}
}
/

create or update class Administrator extends UniversityEmployee {
	instance administrator : {rate ; hoursWorked}
	
	procedure getIncome() {
		return rate * hoursWorked
	}

	procedure constructor() {
		self :< 0 as rate;
		self :< 0 as hoursWorked;
		return self
	}

	procedure constructor(currRate, currHours) {
		self :< currRate as rate;
		self :< currHours as hoursWorked;
		return self
	}

}
/

create or update class UndergraduateAssistant extends Student, Teacher {
	instance undergraduateAssistant : {}

	procedure getIncome() {
		return salary + scholarship
	}
}
/



-- TEST DATA --

Student includes create (
	"st1" as name,
	100 as scholarship
) as student
/

Student includes create (
	"st2" as name,
	200 as scholarship
) as student
/

Student includes create (
	"st3" as name,
	300 as scholarship
) as student
/


Teacher includes create (
	"t1" as name,
	1000 as salary
) as teacher
/

Teacher includes create (
	"t2" as name,
	2000 as salary
) as teacher
/

Teacher includes create (
	"t3" as name,
	3000 as salary
) as teacher
/

Administrator includes create (
	"a1" as name,
	10 as rate,
	100 as hoursWorked
) as administrator
/

Administrator includes create (
	"a2" as name,
	20 as rate,
	200 as hoursWorked
) as administrator
/

Administrator includes create (
	"a3" as name,
	30 as rate,
	100 as hoursWorked
) as administrator
/


UndergraduateAssistant includes create (
	"Alan" as name,
	100 as scholarship,
	300 as salary
) as undergraduateAssistant
/


-- TEST QUERIES --

(undergraduateAssistant where name = "Alan").getIncome()
/

deref(undergraduateAssistant.getIncome())
/

(Student includes (teacher where name = "t1")).constructor()
/

count(student)
/

deref(student)
/

deref(cast(teacher as (Student)))
/

deref(teacher)
/

(Student includes (teacher where name = "t2")).constructor(10)
/

count(teacher)
/

deref(teacher)
/

deref(teacher.getIncome())
/


(Administrator includes (teacher where name = "t2")).constructor(10,10)
/

(Administrator includes (teacher where name = "t3")).constructor(20,50)
/

(Administrator includes (student where name = "st3")).constructor(20,50)
/

count(administrator)
/

count(teacher)
/

count(student)
/

deref(administrator)
/

deref(teacher)
/

deref(student)
/





