/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/VSCSendvaluesPackage.h>

using namespace std;

namespace Protocol {
	VSCSendvaluesPackage::VSCSendvaluesPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):


		root_value_id(stream.read_varuint(mask, cancel, length)),
		o_bundles_count(stream.read_varuint(mask, cancel, length)),
		o_bid_count(stream.read_varuint(mask, cancel, length)),
		p_vid_count(stream.read_varuint(mask, cancel, length))
	{
	}

	VSCSendvaluesPackage::VSCSendvaluesPackage(VarUint root_value_id, VarUint o_bundles_count, VarUint o_bid_count, VarUint p_vid_count):

		root_value_id(root_value_id),
		o_bundles_count(o_bundles_count),
		o_bid_count(o_bid_count),
		p_vid_count(p_vid_count)
	{
	}

	void VSCSendvaluesPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_varuint(mask, cancel, root_value_id);
		stream.write_varuint(mask, cancel, o_bundles_count);
		stream.write_varuint(mask, cancel, o_bid_count);
		stream.write_varuint(mask, cancel, p_vid_count);
	}

	uint8_t VSCSendvaluesPackage::get_type() const
	{
		return V_SC_SENDVALUES_PACKAGE;
	}

	string VSCSendvaluesPackage::to_string() const
	{
		stringstream ss;
		ss << "VSCSendvaluesPackage:" << endl;
		ss << "  root_value_id: " << (root_value_id.is_null()?0:root_value_id.get_val()) << endl;
		ss << "  o_bundles_count: " << (o_bundles_count.is_null()?0:o_bundles_count.get_val()) << endl;
		ss << "  o_bid_count: " << (o_bid_count.is_null()?0:o_bid_count.get_val()) << endl;
		ss << "  p_vid_count: " << (p_vid_count.is_null()?0:p_vid_count.get_val()) << endl;
		return ss.str();
	}

	size_t VSCSendvaluesPackage::get_ser_size() const
	{
		return 0 + DataStream::get_varuint_size(root_value_id) + DataStream::get_varuint_size(o_bundles_count) + DataStream::get_varuint_size(o_bid_count) + DataStream::get_varuint_size(p_vid_count);
	}

	VarUint VSCSendvaluesPackage::get_val_root_value_id() const
	{
		return root_value_id;
	}
	VarUint VSCSendvaluesPackage::get_val_o_bundles_count() const
	{
		return o_bundles_count;
	}
	VarUint VSCSendvaluesPackage::get_val_o_bid_count() const
	{
		return o_bid_count;
	}
	VarUint VSCSendvaluesPackage::get_val_p_vid_count() const
	{
		return p_vid_count;
	}
}
