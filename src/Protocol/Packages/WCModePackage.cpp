/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/WCModePackage.h>

using namespace std;

namespace Protocol {
	WCModePackage::WCModePackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):


		new_mode(stream.read_uint64(mask, cancel, length))
	{
	}

	WCModePackage::WCModePackage(uint64_t new_mode):

		new_mode(new_mode)
	{
	}

	void WCModePackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_uint64(mask, cancel, new_mode);
	}

	uint8_t WCModePackage::get_type() const
	{
		return W_C_MODE_PACKAGE;
	}

	string WCModePackage::to_string() const
	{
		stringstream ss;
		ss << "WCModePackage:" << endl;
		ss << "  new_mode: " << new_mode << endl;
		return ss.str();
	}

	size_t WCModePackage::get_ser_size() const
	{
		return 0 + 8;
	}

	uint64_t WCModePackage::get_val_new_mode() const
	{
		return new_mode;
	}
}
