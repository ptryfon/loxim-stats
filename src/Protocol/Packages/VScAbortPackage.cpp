/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/VScAbortPackage.h>

using namespace std;

namespace Protocol {
	VScAbortPackage::VScAbortPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		reasonCode(stream.read_uint32(mask, cancel, length)),
		reasonString(stream.read_string(mask, cancel, length))
	{
	}

	VScAbortPackage::VScAbortPackage(uint32_t reasonCode, std::auto_ptr<ByteBuffer> reasonString):

		reasonCode(reasonCode),
		reasonString(reasonString)
	{
	}

	void VScAbortPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_uint32(mask, cancel, reasonCode);
		stream.write_string(mask, cancel, reasonString);
	}

	uint8_t VScAbortPackage::get_type() const
	{
		return V_SC_ABORT_PACKAGE;
	}

	string VScAbortPackage::to_string() const
	{
		stringstream ss;
		ss << "VScAbortPackage:" << endl;
		ss << "  reasonCode: " << reasonCode << endl;
		ss << "  reasonString: " << reasonString->get_const_data() << endl;
		return ss.str();
	}

	size_t VScAbortPackage::get_ser_size() const
	{
		return 0 + 8 + reasonString->get_ser_size();
	}

	uint32_t VScAbortPackage::get_val_reasonCode() const
	{
		return reasonCode;
	}
	const ByteBuffer &VScAbortPackage::get_val_reasonString() const
	{
		return *reasonString.get();
	}
}
