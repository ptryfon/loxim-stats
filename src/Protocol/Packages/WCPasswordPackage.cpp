/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/WCPasswordPackage.h>

using namespace std;

namespace Protocol {
	WCPasswordPackage::WCPasswordPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		login(stream.read_string(mask, cancel, length)),
		password(stream.read_string(mask, cancel, length))
	{
	}

	WCPasswordPackage::WCPasswordPackage(std::auto_ptr<ByteBuffer> login, std::auto_ptr<ByteBuffer> password):

		login(login),
		password(password)
	{
	}

	void WCPasswordPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_string(mask, cancel, login);
		stream.write_string(mask, cancel, password);
	}

	uint8_t WCPasswordPackage::get_type() const
	{
		return W_C_PASSWORD_PACKAGE;
	}

	string WCPasswordPackage::to_string() const
	{
		stringstream ss;
		ss << "WCPasswordPackage:" << endl;
		ss << "  login: " << login->get_const_data() << endl;
		ss << "  password: " << password->get_const_data() << endl;
		return ss.str();
	}

	size_t WCPasswordPackage::get_ser_size() const
	{
		return 0 + login->get_ser_size() + password->get_ser_size();
	}

	const ByteBuffer &WCPasswordPackage::get_val_login() const
	{
		return *login.get();
	}
	const ByteBuffer &WCPasswordPackage::get_val_password() const
	{
		return *password.get();
	}
}
