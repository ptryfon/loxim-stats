/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/Data/ExternalRefPackage.h>

using namespace std;

namespace Protocol {
	ExternalRefPackage::ExternalRefPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		value_id(stream.read_uint64(mask, cancel, length)),
		stamp(stream.read_uint64(mask, cancel, length))
	{
	}

	ExternalRefPackage::ExternalRefPackage(uint64_t value_id, uint64_t stamp):

		value_id(value_id),
		stamp(stamp)
	{
	}

	void ExternalRefPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_uint64(mask, cancel, value_id);
		stream.write_uint64(mask, cancel, stamp);
	}

	uint8_t ExternalRefPackage::get_type() const
	{
		return EXTERNAL_REF_PACKAGE;
	}

	string ExternalRefPackage::to_string() const
	{
		stringstream ss;
		ss << "ExternalRefPackage:" << endl;
		ss << "  value_id: " << value_id << endl;
		ss << "  stamp: " << stamp << endl;
		return ss.str();
	}

	size_t ExternalRefPackage::get_ser_size() const
	{
		return 0 + 8 + 8;
	}

	uint64_t ExternalRefPackage::get_val_value_id() const
	{
		return value_id;
	}
	uint64_t ExternalRefPackage::get_val_stamp() const
	{
		return stamp;
	}
}
