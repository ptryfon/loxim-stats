/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/Data/LinkPackage.h>

using namespace std;

namespace Protocol {
	LinkPackage::LinkPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		value_id(stream.read_varuint(mask, cancel, length))
	{
	}

	LinkPackage::LinkPackage(VarUint value_id):

		value_id(value_id)
	{
	}

	void LinkPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_varuint(mask, cancel, value_id);
	}

	uint8_t LinkPackage::get_type() const
	{
		return LINK_PACKAGE;
	}

	string LinkPackage::to_string() const
	{
		stringstream ss;
		ss << "LinkPackage:" << endl;
		ss << "  value_id: " << (value_id.is_null()?0:value_id.get_val()) << endl;
		return ss.str();
	}

	size_t LinkPackage::get_ser_size() const
	{
		return 0 + DataStream::get_varuint_size(value_id);
	}

	VarUint LinkPackage::get_val_value_id() const
	{
		return value_id;
	}
}
