/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/Data/Sint16Package.h>

using namespace std;

namespace Protocol {
	Sint16Package::Sint16Package(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		value(stream.read_int16(mask, cancel, length))
	{
	}

	Sint16Package::Sint16Package(int16_t value):

		value(value)
	{
	}

	void Sint16Package::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_int16(mask, cancel, value);
	}

	uint8_t Sint16Package::get_type() const
	{
		return SINT16_PACKAGE;
	}

	string Sint16Package::to_string() const
	{
		stringstream ss;
		ss << "Sint16Package:" << endl;
		ss << "  value: " << value << endl;
		return ss.str();
	}

	size_t Sint16Package::get_ser_size() const
	{
		return 0 + 2;
	}

	int16_t Sint16Package::get_val_value() const
	{
		return value;
	}
}
