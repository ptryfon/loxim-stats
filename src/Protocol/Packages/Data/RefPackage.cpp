/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/Data/RefPackage.h>

using namespace std;

namespace Protocol {
	RefPackage::RefPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		value_id(stream.read_uint64(mask, cancel, length))
	{
	}

	RefPackage::RefPackage(uint64_t value_id):

		value_id(value_id)
	{
	}

	void RefPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_uint64(mask, cancel, value_id);
	}

	uint8_t RefPackage::get_type() const
	{
		return REF_PACKAGE;
	}

	string RefPackage::to_string() const
	{
		stringstream ss;
		ss << "RefPackage:" << endl;
		ss << "  value_id: " << value_id << endl;
		return ss.str();
	}

	size_t RefPackage::get_ser_size() const
	{
		return 0 + 8;
	}

	uint64_t RefPackage::get_val_value_id() const
	{
		return value_id;
	}
}
