/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/Data/DatetimePackage.h>

using namespace std;

namespace Protocol {
	DatetimePackage::DatetimePackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		year(stream.read_int16(mask, cancel, length)),
		month(stream.read_uint8(mask, cancel, length)),
		day(stream.read_uint8(mask, cancel, length)),
		hour(stream.read_uint8(mask, cancel, length)),
		minutes(stream.read_uint8(mask, cancel, length)),
		sec(stream.read_uint8(mask, cancel, length)),
		milis(stream.read_int16(mask, cancel, length))
	{
	}

	DatetimePackage::DatetimePackage(int16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minutes, uint8_t sec, int16_t milis):

		year(year),
		month(month),
		day(day),
		hour(hour),
		minutes(minutes),
		sec(sec),
		milis(milis)
	{
	}

	void DatetimePackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_int16(mask, cancel, year);
		stream.write_uint8(mask, cancel, month);
		stream.write_uint8(mask, cancel, day);
		stream.write_uint8(mask, cancel, hour);
		stream.write_uint8(mask, cancel, minutes);
		stream.write_uint8(mask, cancel, sec);
		stream.write_int16(mask, cancel, milis);
	}

	uint8_t DatetimePackage::get_type() const
	{
		return DATETIME_PACKAGE;
	}

	string DatetimePackage::to_string() const
	{
		stringstream ss;
		ss << "DatetimePackage:" << endl;
		ss << "  year: " << year << endl;
		ss << "  month: " << ((int)month) << endl;
		ss << "  day: " << ((int)day) << endl;
		ss << "  hour: " << ((int)hour) << endl;
		ss << "  minutes: " << ((int)minutes) << endl;
		ss << "  sec: " << ((int)sec) << endl;
		ss << "  milis: " << milis << endl;
		return ss.str();
	}

	size_t DatetimePackage::get_ser_size() const
	{
		return 0 + 2 + 1 + 1 + 1 + 1 + 1 + 2;
	}

	int16_t DatetimePackage::get_val_year() const
	{
		return year;
	}
	uint8_t DatetimePackage::get_val_month() const
	{
		return month;
	}
	uint8_t DatetimePackage::get_val_day() const
	{
		return day;
	}
	uint8_t DatetimePackage::get_val_hour() const
	{
		return hour;
	}
	uint8_t DatetimePackage::get_val_minutes() const
	{
		return minutes;
	}
	uint8_t DatetimePackage::get_val_sec() const
	{
		return sec;
	}
	int16_t DatetimePackage::get_val_milis() const
	{
		return milis;
	}
}
