/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/Data/DatePackage.h>

using namespace std;

namespace Protocol {
	DatePackage::DatePackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		year(stream.read_int16(mask, cancel, length)),
		month(stream.read_uint8(mask, cancel, length)),
		day(stream.read_uint8(mask, cancel, length))
	{
	}

	DatePackage::DatePackage(int16_t year, uint8_t month, uint8_t day):

		year(year),
		month(month),
		day(day)
	{
	}

	void DatePackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_int16(mask, cancel, year);
		stream.write_uint8(mask, cancel, month);
		stream.write_uint8(mask, cancel, day);
	}

	uint8_t DatePackage::get_type() const
	{
		return DATE_PACKAGE;
	}

	string DatePackage::to_string() const
	{
		stringstream ss;
		ss << "DatePackage:" << endl;
		ss << "  year: " << year << endl;
		ss << "  month: " << ((int)month) << endl;
		ss << "  day: " << ((int)day) << endl;
		return ss.str();
	}

	size_t DatePackage::get_ser_size() const
	{
		return 0 + 2 + 1 + 1;
	}

	int16_t DatePackage::get_val_year() const
	{
		return year;
	}
	uint8_t DatePackage::get_val_month() const
	{
		return month;
	}
	uint8_t DatePackage::get_val_day() const
	{
		return day;
	}
}
