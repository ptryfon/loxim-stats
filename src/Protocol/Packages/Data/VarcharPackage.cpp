/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/Data/VarcharPackage.h>

using namespace std;

namespace Protocol {
	VarcharPackage::VarcharPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):


		value(stream.read_string(mask, cancel, length))
	{
	}

	VarcharPackage::VarcharPackage(std::auto_ptr<ByteBuffer> value):

		value(value)
	{
	}

	void VarcharPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_string(mask, cancel, value);
	}

	uint8_t VarcharPackage::get_type() const
	{
		return VARCHAR_PACKAGE;
	}

	string VarcharPackage::to_string() const
	{
		stringstream ss;
		ss << "VarcharPackage:" << endl;
		ss << "  value: " << value->get_const_data() << endl;
		return ss.str();
	}

	size_t VarcharPackage::get_ser_size() const
	{
		return 0 + value->get_ser_size();
	}

	const ByteBuffer &VarcharPackage::get_val_value() const
	{
		return *value.get();
	}
}
