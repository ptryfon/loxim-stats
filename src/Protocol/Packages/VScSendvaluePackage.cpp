/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/VScSendvaluePackage.h>

using namespace std;

namespace Protocol {
	VScSendvaluePackage::VScSendvaluePackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		value_id(stream.read_varuint(mask, cancel, length)),
		flags(stream.read_uint8(mask, cancel, length)),
		data(PackageFactory::deserialize_unknown(mask, cancel, length, stream))
	{
	}

	VScSendvaluePackage::VScSendvaluePackage(VarUint value_id, uint8_t flags, std::auto_ptr<Package> data):

		value_id(value_id),
		flags(flags),
		data(data)
	{
	}

	void VScSendvaluePackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_varuint(mask, cancel, value_id);
		stream.write_uint8(mask, cancel, flags);
		stream.write_varuint(mask, cancel, VarUint(data->get_type(), false));
		data->serialize(mask, cancel, stream, false);
	}

	uint8_t VScSendvaluePackage::get_type() const
	{
		return V_SC_SENDVALUE_PACKAGE;
	}

	string VScSendvaluePackage::to_string() const
	{
		stringstream ss;
		ss << "VScSendvaluePackage:" << endl;
		ss << "  value_id: " << (value_id.is_null()?0:value_id.get_val()) << endl;
		ss << "  flags: " << flags << endl;
		ss << "  data: " << data->to_string() << endl;
		return ss.str();
	}

	size_t VScSendvaluePackage::get_ser_size() const
	{
		return 0 + DataStream::get_varuint_size(value_id) + 8 + data->get_ser_size() + DataStream::get_varuint_size(VarUint(data->get_type(), false));
	}

	VarUint VScSendvaluePackage::get_val_value_id() const
	{
		return value_id;
	}
	uint8_t VScSendvaluePackage::get_val_flags() const
	{
		return flags;
	}
	const Package &VScSendvaluePackage::get_val_data() const
	{
		return *data.get();
	}
}
