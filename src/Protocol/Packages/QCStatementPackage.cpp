/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/QCStatementPackage.h>

using namespace std;

namespace Protocol {
	QCStatementPackage::QCStatementPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):


		flags(stream.read_uint64(mask, cancel, length)),
		statement(stream.read_string(mask, cancel, length))
	{
	}

	QCStatementPackage::QCStatementPackage(uint64_t flags, std::auto_ptr<ByteBuffer> statement):

		flags(flags),
		statement(statement)
	{
	}

	void QCStatementPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_uint64(mask, cancel, flags);
		stream.write_string(mask, cancel, statement);
	}

	uint8_t QCStatementPackage::get_type() const
	{
		return Q_C_STATEMENT_PACKAGE;
	}

	string QCStatementPackage::to_string() const
	{
		stringstream ss;
		ss << "QCStatementPackage:" << endl;
		ss << "  flags: " << flags << endl;
		ss << "  statement: " << statement->get_const_data() << endl;
		return ss.str();
	}

	size_t QCStatementPackage::get_ser_size() const
	{
		return 0 + 8 + statement->get_ser_size();
	}

	uint64_t QCStatementPackage::get_val_flags() const
	{
		return flags;
	}
	const ByteBuffer &QCStatementPackage::get_val_statement() const
	{
		return *statement.get();
	}
}
