/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/ASCErrorPackage.h>

using namespace std;

namespace Protocol {
	ASCErrorPackage::ASCErrorPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		error_code(stream.read_uint32(mask, cancel, length)),
		error_object_id(stream.read_varuint(mask, cancel, length)),
		description(stream.read_string(mask, cancel, length)),
		line(stream.read_uint32(mask, cancel, length)),
		col(stream.read_uint32(mask, cancel, length))
	{
	}

	ASCErrorPackage::ASCErrorPackage(uint32_t error_code, VarUint error_object_id, std::auto_ptr<ByteBuffer> description, uint32_t line, uint32_t col):

		error_code(error_code),
		error_object_id(error_object_id),
		description(description),
		line(line),
		col(col)
	{
	}

	void ASCErrorPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_uint32(mask, cancel, error_code);
		stream.write_varuint(mask, cancel, error_object_id);
		stream.write_string(mask, cancel, description);
		stream.write_uint32(mask, cancel, line);
		stream.write_uint32(mask, cancel, col);
	}

	uint8_t ASCErrorPackage::get_type() const
	{
		return A_SC_ERROR_PACKAGE;
	}

	string ASCErrorPackage::to_string() const
	{
		stringstream ss;
		ss << "ASCErrorPackage:" << endl;
		ss << "  error_code: " << error_code << endl;
		ss << "  error_object_id: " << (error_object_id.is_null()?0:error_object_id.get_val()) << endl;
		ss << "  description: " << description->get_const_data() << endl;
		ss << "  line: " << line << endl;
		ss << "  col: " << col << endl;
		return ss.str();
	}

	size_t ASCErrorPackage::get_ser_size() const
	{
		return 0 + 4 + DataStream::get_varuint_size(error_object_id) + description->get_ser_size() + 4 + 4;
	}

	uint32_t ASCErrorPackage::get_val_error_code() const
	{
		return error_code;
	}
	VarUint ASCErrorPackage::get_val_error_object_id() const
	{
		return error_object_id;
	}
	const ByteBuffer &ASCErrorPackage::get_val_description() const
	{
		return *description.get();
	}
	uint32_t ASCErrorPackage::get_val_line() const
	{
		return line;
	}
	uint32_t ASCErrorPackage::get_val_col() const
	{
		return col;
	}
}
