#ifndef PROTOCOL_W_C_HELLO_PACKAGE_H
#define PROTOCOL_W_C_HELLO_PACKAGE_H

/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <memory>
#include <Protocol/Packages/Package.h>
#include <Protocol/ByteBuffer.h>

namespace Protocol {
	class WCHelloPackage : public Package {
		private:
			int64_t pid;
			std::auto_ptr<ByteBuffer> client_name;
			std::auto_ptr<ByteBuffer> client_version;
			std::auto_ptr<ByteBuffer> hostname;
			std::auto_ptr<ByteBuffer> language;
			uint64_t collation;
			int8_t timezone;
		public:
			WCHelloPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream);
			WCHelloPackage(int64_t pid, std::auto_ptr<ByteBuffer> client_name, std::auto_ptr<ByteBuffer> client_version, std::auto_ptr<ByteBuffer> hostname, std::auto_ptr<ByteBuffer> language, uint64_t collation, int8_t timezone);

			void serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header = true) const;
			uint8_t get_type() const;
			std::string to_string() const;
			size_t get_ser_size() const;
			int64_t get_val_pid() const;
			const ByteBuffer &get_val_client_name() const;
			const ByteBuffer &get_val_client_version() const;
			const ByteBuffer &get_val_hostname() const;
			const ByteBuffer &get_val_language() const;
			uint64_t get_val_collation() const;
			int8_t get_val_timezone() const;
	};
}
#endif
