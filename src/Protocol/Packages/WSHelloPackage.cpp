/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/WSHelloPackage.h>

using namespace std;

namespace Protocol {
	WSHelloPackage::WSHelloPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):

		protocol_major(stream.read_uint8(mask, cancel, length)),
		protocol_minor(stream.read_uint8(mask, cancel, length)),
		system_major(stream.read_uint8(mask, cancel, length)),
		system_minor(stream.read_uint8(mask, cancel, length)),
		max_package_size(stream.read_uint32(mask, cancel, length)),
		features(stream.read_uint64(mask, cancel, length)),
		auth_methods(stream.read_uint64(mask, cancel, length)),
		salt(stream.read_string(mask, cancel, length))
	{
	}

	WSHelloPackage::WSHelloPackage(uint8_t protocol_major, uint8_t protocol_minor, uint8_t system_major, uint8_t system_minor, uint32_t max_package_size, uint64_t features, uint64_t auth_methods, std::auto_ptr<ByteBuffer> salt):

		protocol_major(protocol_major),
		protocol_minor(protocol_minor),
		system_major(system_major),
		system_minor(system_minor),
		max_package_size(max_package_size),
		features(features),
		auth_methods(auth_methods),
		salt(salt)
	{
	}

	void WSHelloPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_uint8(mask, cancel, protocol_major);
		stream.write_uint8(mask, cancel, protocol_minor);
		stream.write_uint8(mask, cancel, system_major);
		stream.write_uint8(mask, cancel, system_minor);
		stream.write_uint32(mask, cancel, max_package_size);
		stream.write_uint64(mask, cancel, features);
		stream.write_uint64(mask, cancel, auth_methods);
		stream.write_string(mask, cancel, salt);
	}

	uint8_t WSHelloPackage::get_type() const
	{
		return W_S_HELLO_PACKAGE;
	}

	string WSHelloPackage::to_string() const
	{
		stringstream ss;
		ss << "WSHelloPackage:" << endl;
		ss << "  protocol_major: " << ((int)protocol_major) << endl;
		ss << "  protocol_minor: " << ((int)protocol_minor) << endl;
		ss << "  system_major: " << ((int)system_major) << endl;
		ss << "  system_minor: " << ((int)system_minor) << endl;
		ss << "  max_package_size: " << max_package_size << endl;
		ss << "  features: " << features << endl;
		ss << "  auth_methods: " << auth_methods << endl;
		ss << "  salt: " << salt->get_const_data() << endl;
		return ss.str();
	}

	size_t WSHelloPackage::get_ser_size() const
	{
		return 0 + 1 + 1 + 1 + 1 + 4 + 8 + 8 + salt->get_ser_size();
	}

	uint8_t WSHelloPackage::get_val_protocol_major() const
	{
		return protocol_major;
	}
	uint8_t WSHelloPackage::get_val_protocol_minor() const
	{
		return protocol_minor;
	}
	uint8_t WSHelloPackage::get_val_system_major() const
	{
		return system_major;
	}
	uint8_t WSHelloPackage::get_val_system_minor() const
	{
		return system_minor;
	}
	uint32_t WSHelloPackage::get_val_max_package_size() const
	{
		return max_package_size;
	}
	uint64_t WSHelloPackage::get_val_features() const
	{
		return features;
	}
	uint64_t WSHelloPackage::get_val_auth_methods() const
	{
		return auth_methods;
	}
	const ByteBuffer &WSHelloPackage::get_val_salt() const
	{
		return *salt.get();
	}
}
