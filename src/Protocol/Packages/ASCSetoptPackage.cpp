/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <string>
#include <sstream>
#include <Protocol/Enums/DataPackages.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/PackageFactory.h>
#include <Protocol/Enums/Packages.h>
#include <Protocol/Packages/ASCSetoptPackage.h>

using namespace std;

namespace Protocol {
	ASCSetoptPackage::ASCSetoptPackage(const sigset_t &mask, const bool &cancel, size_t &length, DataStream &stream):


		key(stream.read_string(mask, cancel, length)),
		value(stream.read_string(mask, cancel, length))
	{
	}

	ASCSetoptPackage::ASCSetoptPackage(std::auto_ptr<ByteBuffer> key, std::auto_ptr<ByteBuffer> value):

		key(key),
		value(value)
	{
	}

	void ASCSetoptPackage::serialize(const sigset_t &mask, const bool& cancel, DataStream &stream, bool with_header) const
	{
		if (with_header){
			stream.write_uint8(mask, cancel, get_type());
			stream.write_uint32(mask, cancel, get_ser_size());
		}
		stream.write_string(mask, cancel, key);
		stream.write_string(mask, cancel, value);
	}

	uint8_t ASCSetoptPackage::get_type() const
	{
		return A_SC_SETOPT_PACKAGE;
	}

	string ASCSetoptPackage::to_string() const
	{
		stringstream ss;
		ss << "ASCSetoptPackage:" << endl;
		ss << "  key: " << key->get_const_data() << endl;
		ss << "  value: " << value->get_const_data() << endl;
		return ss.str();
	}

	size_t ASCSetoptPackage::get_ser_size() const
	{
		return 0 + key->get_ser_size() + value->get_ser_size();
	}

	const ByteBuffer &ASCSetoptPackage::get_val_key() const
	{
		return *key.get();
	}
	const ByteBuffer &ASCSetoptPackage::get_val_value() const
	{
		return *value.get();
	}
}
