/* This file is generated by lw_protogen. DO NOT EDIT.*/
#include <memory>
#include <Protocol/Exceptions.h>
#include <Protocol/DataPackageFactory.h>
#include <Protocol/Enums/Enums.h>
#include <Protocol/Packages/Data/BagPackage.h>
#include <Protocol/Packages/Data/BindingPackage.h>
#include <Protocol/Packages/Data/BobPackage.h>
#include <Protocol/Packages/Data/BoolPackage.h>
#include <Protocol/Packages/Data/DatePackage.h>
#include <Protocol/Packages/Data/DatetimePackage.h>
#include <Protocol/Packages/Data/DatetimetzPackage.h>
#include <Protocol/Packages/Data/DoublePackage.h>
#include <Protocol/Packages/Data/ExternalRefPackage.h>
#include <Protocol/Packages/Data/LinkPackage.h>
#include <Protocol/Packages/Data/RefPackage.h>
#include <Protocol/Packages/Data/SequencePackage.h>
#include <Protocol/Packages/Data/Sint16Package.h>
#include <Protocol/Packages/Data/Sint32Package.h>
#include <Protocol/Packages/Data/Sint64Package.h>
#include <Protocol/Packages/Data/Sint8Package.h>
#include <Protocol/Packages/Data/StructPackage.h>
#include <Protocol/Packages/Data/TimePackage.h>
#include <Protocol/Packages/Data/TimetzPackage.h>
#include <Protocol/Packages/Data/Uint16Package.h>
#include <Protocol/Packages/Data/Uint32Package.h>
#include <Protocol/Packages/Data/Uint64Package.h>
#include <Protocol/Packages/Data/Uint8Package.h>
#include <Protocol/Packages/Data/VarcharPackage.h>
#include <Protocol/Packages/Data/VoidPackage.h>
#include <Protocol/Packages/WCHelloPackage.h>

namespace Protocol{

	std::auto_ptr<Package> DataPackageFactory::deserialize(const sigset_t
			&mask, const bool &cancel, uint8_t id, size_t &length,
			DataStream &stream)
	{
		switch (id) {
			case BAG_PACKAGE: return std::auto_ptr<Package>(new BagPackage(mask, cancel, length, stream));
			case BINDING_PACKAGE: return std::auto_ptr<Package>(new BindingPackage(mask, cancel, length, stream));
			case BOB_PACKAGE: return std::auto_ptr<Package>(new BobPackage(mask, cancel, length, stream));
			case BOOL_PACKAGE: return std::auto_ptr<Package>(new BoolPackage(mask, cancel, length, stream));
			case DATE_PACKAGE: return std::auto_ptr<Package>(new DatePackage(mask, cancel, length, stream));
			case DATETIME_PACKAGE: return std::auto_ptr<Package>(new DatetimePackage(mask, cancel, length, stream));
			case DATETIMETZ_PACKAGE: return std::auto_ptr<Package>(new DatetimetzPackage(mask, cancel, length, stream));
			case DOUBLE_PACKAGE: return std::auto_ptr<Package>(new DoublePackage(mask, cancel, length, stream));
			case EXTERNAL_REF_PACKAGE: return std::auto_ptr<Package>(new ExternalRefPackage(mask, cancel, length, stream));
			case LINK_PACKAGE: return std::auto_ptr<Package>(new LinkPackage(mask, cancel, length, stream));
			case REF_PACKAGE: return std::auto_ptr<Package>(new RefPackage(mask, cancel, length, stream));
			case SEQUENCE_PACKAGE: return std::auto_ptr<Package>(new SequencePackage(mask, cancel, length, stream));
			case SINT16_PACKAGE: return std::auto_ptr<Package>(new Sint16Package(mask, cancel, length, stream));
			case SINT32_PACKAGE: return std::auto_ptr<Package>(new Sint32Package(mask, cancel, length, stream));
			case SINT64_PACKAGE: return std::auto_ptr<Package>(new Sint64Package(mask, cancel, length, stream));
			case SINT8_PACKAGE: return std::auto_ptr<Package>(new Sint8Package(mask, cancel, length, stream));
			case STRUCT_PACKAGE: return std::auto_ptr<Package>(new StructPackage(mask, cancel, length, stream));
			case TIME_PACKAGE: return std::auto_ptr<Package>(new TimePackage(mask, cancel, length, stream));
			case TIMETZ_PACKAGE: return std::auto_ptr<Package>(new TimetzPackage(mask, cancel, length, stream));
			case UINT16_PACKAGE: return std::auto_ptr<Package>(new Uint16Package(mask, cancel, length, stream));
			case UINT32_PACKAGE: return std::auto_ptr<Package>(new Uint32Package(mask, cancel, length, stream));
			case UINT64_PACKAGE: return std::auto_ptr<Package>(new Uint64Package(mask, cancel, length, stream));
			case UINT8_PACKAGE: return std::auto_ptr<Package>(new Uint8Package(mask, cancel, length, stream));
			case VARCHAR_PACKAGE: return std::auto_ptr<Package>(new VarcharPackage(mask, cancel, length, stream));
			case VOID_PACKAGE: return std::auto_ptr<Package>(new VoidPackage(mask, cancel, length, stream));
		}
		throw ProtocolLogic();
	}

	std::auto_ptr<Package> DataPackageFactory::deserialize_unknown(const sigset_t
			&mask, const bool &cancel, size_t &length,
			DataStream &stream)
	{
		uint8_t id = stream.read_uint8(mask, cancel, length);
		return deserialize(mask, cancel, id, length, stream);
	}
}
