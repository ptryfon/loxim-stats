package pl.edu.mimuw.loxim.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class LoXiMStatementImpl implements LoXiMStatement {

	private LoXiMConnectionInternal connection;
	private int fetchSize;
	private boolean closed;
	private SQLWarning warning;
	private ExecutionResult result;
	
	LoXiMStatementImpl(LoXiMConnectionInternal connection) {
		this.connection = connection;
	}
	
	@Override
	public void addBatch(String sql) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public void cancel() throws SQLException {
		checkClosed();
		connection.cancel();
	}

	@Override
	public void clearBatch() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public void clearWarnings() throws SQLException {
		checkClosed();
		warning = null;
	}

	@Override
	public void close() throws SQLException {
		if (closed) {
			return;
		}
		
		closed = true;
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		checkClosed();
		result = execute0(sql);
		return !result.isEmpty();
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		if (autoGeneratedKeys != Statement.NO_GENERATED_KEYS) {
			if (autoGeneratedKeys != Statement.RETURN_GENERATED_KEYS) {
				throw new SQLException("Invalid autoGeneratedKeys value: " + autoGeneratedKeys);
			} else {
				throw new SQLFeatureNotSupportedException();
			}
		}
		return execute(sql);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return execute(sql);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return execute(sql);
	}

	@Override
	public int[] executeBatch() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public LoXiMResultSet executeQuery(String sql) throws SQLException {
		checkClosed();
		result = execute0(sql);
		return result.asLoXiMResultSet();
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		checkClosed();
		result = execute0(sql);
		return result.getUpdates();
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		if (autoGeneratedKeys != Statement.NO_GENERATED_KEYS) {
			if (autoGeneratedKeys != Statement.RETURN_GENERATED_KEYS) {
				throw new SQLException("Invalid autoGeneratedKeys value: " + autoGeneratedKeys);
			} else {
				throw new SQLFeatureNotSupportedException();
			}
		}
		return executeUpdate(sql);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public LoXiMConnection getConnection() throws SQLException {
		return connection;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		checkClosed();
		return ResultSet.FETCH_FORWARD;
	}

	@Override
	public int getFetchSize() throws SQLException {
		return fetchSize;
	}

	@Override
	public LoXiMResultSet getGeneratedKeys() throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	@Override
	public int getMaxRows() throws SQLException {
		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		checkClosed();
		result.asLoXiMResultSet().close();
		return false;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		checkClosed();
		if (current != Statement.CLOSE_CURRENT_RESULT) {
			throw new SQLFeatureNotSupportedException("Only CLOSE_CURRENT_RESULT is supported");
		}
		return getMoreResults();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		checkClosed();
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public LoXiMResultSet getResultSet() throws SQLException {
		checkClosed();
		return result.asLoXiMResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		checkClosed();
		return ResultSet.CONCUR_READ_ONLY;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		checkClosed();
		return ResultSet.HOLD_CURSORS_OVER_COMMIT;
	}

	@Override
	public int getResultSetType() throws SQLException {
		checkClosed();
		return ResultSet.TYPE_FORWARD_ONLY;
	}

	@Override
	public int getUpdateCount() throws SQLException {
		checkClosed();
		return result.getUpdates();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		checkClosed();
		return warning;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return closed;
	}

	@Override
	public boolean isPoolable() throws SQLException {
		checkClosed();
		return false;
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		checkClosed();
		// do nothing
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		checkClosed();
		switch (direction) {
		case ResultSet.FETCH_FORWARD:
			return;
		case ResultSet.FETCH_REVERSE:
		case ResultSet.FETCH_UNKNOWN:
			throw new SQLException("Bad fetch direction: " + direction + " - only FETCH_FORWARD is available");
		default:
			throw new SQLException("Unknown fetch direction: " + direction);
		}
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		checkClosed();
		checkGEThan(rows, 0);
		fetchSize = rows;
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		checkClosed();
		checkGEThan(max, 0);
		// do nothing
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		checkClosed();
		checkGEThan(max, 0);
		// do nothing
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		checkClosed();
		// do nothing
	}

	private void checkGEThan(int num, int limit) throws SQLException {
		if (num < limit) {
			throw new SQLException("The parameter " + num + " is not >= " + limit);
		}
	}
	
	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		checkClosed();
		// TODO Auto-generated method stub

	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return LoXiMStatement.class.equals(iface);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		if (isWrapperFor(iface)) {
			return (T) this;
		}
		throw new SQLException("Not a wrapper for " + iface);
	}

	private void checkClosed() throws SQLException {
		if (closed) {
			throw new SQLException("Result set is closed");
		}
	}
	
	private ExecutionResult execute0(String stmt) throws SQLException {
		return connection.execute(this, stmt);
	}
}
